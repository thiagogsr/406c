val String filename = "speedtest.rules"

rule "Speedtest init"
when
    System started
then
    createTimer(now.plusSeconds(195)) [|
        if (SpeedtestRerun.state == NULL) SpeedtestRerun.postUpdate(OFF)
        if (SpeedtestSummary.state == NULL || SpeedtestSummary.state == "")
            SpeedtestSummary.postUpdate("!? (desconhecido)")
    ]
end

rule "Speedtest"
when
    Time cron "0 0 * * * ?" or
    Item SpeedtestRerun received command ON
then
    logInfo(filename, "--> speedtest executed...")

    // update timestamp for last execution
    SpeedtestResultDate.postUpdate(new DateTimeType())

    // execute the script, you may have to change the path depending on your system
    var String speedtestCliOutput = executeCommandLine(Duration.ofSeconds(120), "speedtest", "-f", "csv", "--accept-license", "--accept-gdpr")

    // for debugging:
    //var String speedtestCliOutput = "Ping: 43.32 ms\nDownload: 21.64 Mbit/s\nUpload: 4.27 Mbit/s"
    //logInfo(filename, "--> speedtest output:\n" + speedtestCliOutput + "\n\n")

    var String[] results   = speedtestCliOutput.split(",")
    var String server      = results.get(0).replace("\"", "")
    var float latency      = Float.parseFloat(results.get(2).replace("\"", ""))
    var float jitter       = Float.parseFloat(results.get(3).replace("\"", ""))
    var float packageLoss  = Float.parseFloat(results.get(4).replace("\"", ""))
    var float download     = Float.parseFloat(results.get(5).replace("\"", "")) / 100000
    var float upload       = Float.parseFloat(results.get(6).replace("\"", "")) / 100000

    SpeedtestResultServer.postUpdate(server)
    SpeedtestResultLatency.postUpdate(latency)
    SpeedtestResultJitter.postUpdate(jitter)
    SpeedtestResultPackageLoss.postUpdate(packageLoss)
    SpeedtestResultDownload.postUpdate(download)
    SpeedtestResultUpload.postUpdate(upload)

    SpeedtestSummary.postUpdate(String::format("ᐁ  %.1f Mbps  ᐃ %.1f Mbps", download, upload))

    logInfo(filename, "--> speedtest finished.")

    SpeedtestRerun.postUpdate(OFF)
end

// vim: syntax=Xtend
